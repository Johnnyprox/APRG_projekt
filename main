import enc
import dec
import key


print("Choose a, b or c...")
print("a) encryption")
print("b) decryption")
print("c) encryption + decryption ")
choice = input("Your choice: ")
message = input("Your message: ")





def encryption():

    """ This function encrypts the message """

    output_message = ""
    for n_m in range(n_o_m):
        a_r_k = enc.add_round_key(new_matrix[n_m], key[:4])
        for round in range(nr - 1):
            su_b = enc.sub_bytes(a_r_k)
            sh_r = enc.shift_rows(su_b)
            mix_c = enc.mix_columns(sh_r)
            a_r_k = enc.add_next_key(mix_c, key[(round + 1) * 4:(round + 2) * 4])
        su_b = enc.sub_bytes(a_r_k)
        sh_r = enc.shift_rows(su_b)
        a_r_k = enc.add_next_key(sh_r, key[nr * 4:(nr + 1) * 4])
        output_message = output_message + enc.deconvert_m(a_r_k)
    return output_message


def decryption():

    """ This function decrypts the message """

    output_message = ""
    if nr == 10:
        p = 40
    elif nr == 12:
        p = 48
    else:
        p = 56
    for n_m in range(n_o_m):
        mix_c = enc.add_round_key(sec_matrix[n_m], key[p:p + 4])
        for round in range(nr - 1):
            sh_r = dec.inv_shift_rows(mix_c)
            su_b = dec.inv_sub_bytes(sh_r)
            a_r_k = enc.add_next_key(su_b, key[p - ((round + 1) * 4):(p + 4) - ((round + 1) * 4)])
            mix_c = dec.inv_mix_columns(a_r_k)
        sh_r = dec.inv_shift_rows(mix_c)
        su_b = dec.inv_sub_bytes(sh_r)
        a_r_k = enc.add_next_key(su_b, key[p - (nr * 4):(p + 4) - (nr * 4)])
        output_message = output_message + dec.inv_deconvert_m(a_r_k)
    return output_message


def main():
    if choice == "a":
        print(encryption())
    elif choice == "b":
        print(decryption())
    elif choice == "c":
        print(encryption())
        print(decryption())
    else:
        print("Error")

if choice == "a":
    new_matrix, n_o_m = enc.edit(message)
    key, nr = key.expand_k()
elif choice == "b":
    sec_matrix, n_o_m = enc.edit(message)
    key, nr = key.expand_k()
elif choice == "c":
    new_matrix, n_o_m = enc.edit(message)
    sec_matrix = encryption()
    key, nr = key.expand_k()

main()

